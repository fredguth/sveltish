# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/10_utils.ipynb.

# %% auto 0
__all__ = ['safe_not_equal', 'compose']

# %% ../nbs/10_utils.ipynb 3
def safe_not_equal(a,b):
    "Check if `a` is not equal to `b`"
    primitive = (int, str, bool, frozenset, tuple)
    return (a != b) if isinstance(a, primitive) else True

# %% ../nbs/10_utils.ipynb 5
from functools import reduce
from typing import Callable, TypeVar,  Generic, Union, Optional, Set, Protocol, Any
from typing_extensions import Annotated

# %% ../nbs/10_utils.ipynb 6
def compose(*functions: Callable[[Any], Any]) -> Callable[[Any], Any]:
    """Compose multiple functions left to right.

    Examples:
        >>> compose()(x) == x
        >>> compose(f)(x) == f(x)
        >>> compose(f, g)(x) == g(f(x))
        >>> compose(f, g, h)(x) == h(g(f(x)))
        ...
    Returns:
        The composed function.
    """

    def _compose(x: Any) -> Any:
        return reduce(lambda v, f: f(v), functions, x)

    return _compose
